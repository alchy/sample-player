#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
code: sample-player.py
MIDI Sampler - Opraven√° verze s vylep≈°enou interpolac√≠
=====================================================s
VERSION HASH: 7f8e3a9d-2025-08-05-v2.2-FIXED
Author: Opraveno pro spr√°vnou interpolaci velocity a DbLvl
N√°stroj pro mapov√°n√≠ vzork≈Ø na MIDI velocity a generov√°n√≠ chybƒõj√≠c√≠ch not
s pokroƒçil√Ωm cachov√°n√≠m a strukturovan√Ωm k√≥dem.
"""
import os
import re
import argparse
import logging
import shutil
import resampy
import numpy as np
import torchaudio
import torch
import pygame.midi
import pygame.mixer
from collections import defaultdict
from uuid import uuid4
from typing import Dict, List, Tuple, Optional


class Config:
    """Konfigurace aplikace."""
    VERSION_HASH = "7f8e3a9d-2025-08-05-v2.2-FIXED"
    VELOCITY_LEVELS = 8
    MIDI_VELOCITY_MAX = 127
    TEMP_DIR_NAME = "samples_tmp"
    MAX_PITCH_SHIFT = 12  # Maxim√°ln√≠ povolen√Ω posun noty (v p≈Ølt√≥nech)
    MIDI_NOTE_RANGE = range(21, 109)


class AudioFile:
    """Reprezentuje jeden audio soubor se v≈°emi jeho metadaty."""

    def __init__(self, filepath: str, midi_note: int, note_name: str, db_level: int):
        self.filepath = filepath
        self.midi_note = midi_note
        self.note_name = note_name
        self.db_level = db_level
        self.filename = os.path.basename(filepath)

    @classmethod
    def from_filename(cls, filepath: str) -> Optional['AudioFile']:
        """Vytvo≈ô√≠ AudioFile z cesty k souboru, pokud odpov√≠d√° form√°tu."""
        filename = os.path.basename(filepath)
        # FIXOVAN√ù REGEX - nyn√≠ s .wav na konci!
        match = re.match(r"m(\d{3})-([A-G]#?_\d)-DbLvl([+-]?\d+)\.wav", filename)
        if match:
            midi_note = int(match.group(1))
            note_name = match.group(2)
            db_level = int(match.group(3))
            return cls(filepath, midi_note, note_name, db_level)
        return None

    def __repr__(self):
        return f"AudioFile(note={self.midi_note}, db={self.db_level}, file={self.filename})"


class VelocityMapper:
    """Star√° se o mapov√°n√≠ MIDI velocity na audio soubory."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.velocity_map: Dict[Tuple[int, int], str] = {}  # (midi_note, velocity) -> filepath
        self.available_notes: set = set()
        self.note_samples: Dict[int, List[AudioFile]] = defaultdict(list)  # V≈°echny vzorky pro ka≈ædou notu

    def build_velocity_map(self, input_dir: str) -> None:
        """Vytvo≈ô√≠ mapov√°n√≠ MIDI not a velocity na zvukov√© soubory."""
        self.logger.info("üîç Prohled√°v√°m slo≈æku '%s' pro v√Ωbƒõr vzork≈Ø podle MIDI velocity...", input_dir)
        note_db_map = defaultdict(list)
        # Naƒçten√≠ v≈°ech audio soubor≈Ø
        for filename in os.listdir(input_dir):
            if not filename.endswith(".wav"):
                continue
            filepath = os.path.join(input_dir, filename)
            audio_file = AudioFile.from_filename(filepath)
            if audio_file:
                note_db_map[audio_file.midi_note].append((audio_file.db_level, audio_file.filepath))
                self.available_notes.add(audio_file.midi_note)
                self.note_samples[audio_file.midi_note].append(audio_file)
                self.logger.debug("Naƒçten soubor: nota=%d, DbLvl=%d, soubor=%s",
                                  audio_file.midi_note, audio_file.db_level, filename)
            else:
                self.logger.debug("P≈ôeskoƒçen soubor (neodpov√≠d√° form√°tu): %s", filename)
        # Vytvo≈ôen√≠ velocity mapov√°n√≠
        for midi_note, db_files in note_db_map.items():
            db_files.sort(key=lambda x: x[0])  # Se≈ôazen√≠ podle db_level (od nejni≈æ≈°√≠ho k nejvy≈°≈°√≠mu)
            total = len(db_files)
            self.logger.info("üéµ MIDI nota %d: %d r≈Øzn√Ωch √∫rovn√≠ hlasitosti (DbLvl)", midi_note, total)
            self.logger.debug("DbLvl √∫rovnƒõ pro notu %d: %s", midi_note, [db for db, _ in db_files])
            ranges = self._get_velocity_ranges(total)
            self.logger.debug("Velocity rozsahy pro notu %d: %s", midi_note, ranges)
            for i, ((db_level, filepath), (v_start, v_end)) in enumerate(zip(db_files, ranges)):
                self.logger.debug("DbLvl %d -> velocity rozsah %d-%d (%s)",
                                  db_level, v_start, v_end, os.path.basename(filepath))
                for velocity in range(v_start, v_end + 1):
                    self.velocity_map[(midi_note, velocity)] = filepath
                    if velocity == v_start or velocity == v_end:  # Logujeme jen hranice pro p≈ôehlednost
                        self.logger.debug("Mapov√°n√≠: nota=%d, velocity=%d -> %s",
                                          midi_note, velocity, os.path.basename(filepath))
        self.logger.info("‚úÖ Velocity map vytvo≈ôen pro %d not.", len(self.available_notes))

    def _get_velocity_ranges(self, level_count: int) -> List[Tuple[int, int]]:
        """Vytvo≈ô√≠ rozsahy MIDI velocity na z√°kladƒõ poƒçtu √∫rovn√≠."""
        step = Config.MIDI_VELOCITY_MAX / level_count
        ranges = []
        for i in range(level_count):
            start = round(i * step)
            end = round((i + 1) * step) - 1
            if i == level_count - 1:  # Posledn√≠ rozsah jde a≈æ do maxima
                end = Config.MIDI_VELOCITY_MAX - 1
            ranges.append((start, end))
        return ranges

    def get_sample_for_velocity(self, midi_note: int, velocity: int) -> Optional[str]:
        """Vr√°t√≠ cestu k vzorku pro danou notu a velocity."""
        sample = self.velocity_map.get((midi_note, velocity))
        self.logger.debug("Hled√°m vzorek: nota=%d, velocity=%d -> %s",
                          midi_note, velocity, sample if sample else "nenalezeno")
        return sample

    def add_generated_sample(self, midi_note: int, velocity_range: Tuple[int, int], filepath: str) -> None:
        """P≈ôid√° vygenerovan√Ω vzorek do mapov√°n√≠."""
        v_start, v_end = velocity_range
        for velocity in range(v_start, v_end + 1):
            self.velocity_map[(midi_note, velocity)] = filepath
            self.logger.debug("P≈ôid√°n vygenerovan√Ω vzorek: nota=%d, velocity=%d -> %s",
                              midi_note, velocity, os.path.basename(filepath))

    def get_samples_for_note(self, midi_note: int) -> List[AudioFile]:
        """Vr√°t√≠ v≈°echny vzorky pro danou notu se≈ôazen√© podle DbLvl."""
        samples = self.note_samples.get(midi_note, [])
        return sorted(samples, key=lambda x: x.db_level)


class SampleGenerator:
    """Generuje chybƒõj√≠c√≠ vzorky pomoc√≠ resamplingu s vylep≈°enou interpolac√≠."""

    def __init__(self, velocity_mapper: VelocityMapper):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.velocity_mapper = velocity_mapper

    def generate_missing_notes(self, temp_dir: str) -> None:
        """Vygeneruje chybƒõj√≠c√≠ noty s r≈Øzn√Ωmi velocity √∫rovnƒõmi."""
        self.logger.info("üõ†Ô∏è P≈ôedzpracov√°n√≠: kontrola a vytv√°≈ôen√≠ chybƒõj√≠c√≠ch t√≥n≈Ø...")
        base_notes = sorted(self.velocity_mapper.available_notes)
        if not base_notes:
            self.logger.error("≈Ω√°dn√© z√°kladn√≠ noty k dispozici pro generov√°n√≠!")
            return
        for note in Config.MIDI_NOTE_RANGE:
            if note in self.velocity_mapper.available_notes:
                self.logger.debug("Nota %d ji≈æ existuje v p≈Øvodn√≠ch vzorc√≠ch, p≈ôeskoƒçena.", note)
                continue
            # Kontrola, zda u≈æ existuj√≠ vygenerovan√© vzorky pro tuto notu
            if self._note_samples_exist_in_temp(note, temp_dir):
                self.logger.info("‚ôªÔ∏è Nota %d: pou≈æ√≠v√°m existuj√≠c√≠ vygenerovan√© vzorky", note)
                self._load_existing_samples_for_note(note, temp_dir)
                continue
            # Generov√°n√≠ nov√© noty s v√≠ce velocity √∫rovnƒõmi
            self._generate_note_with_multiple_velocities(note, base_notes, temp_dir)

    def _note_samples_exist_in_temp(self, note: int, temp_dir: str) -> bool:
        """Zkontroluje, zda u≈æ existuj√≠ vzorky pro danou notu v temp slo≈æce."""
        if not os.path.exists(temp_dir):
            return False
        pattern = f"m{note:03d}-"
        for filename in os.listdir(temp_dir):
            if filename.startswith(pattern) and filename.endswith(".wav"):
                return True
        return False

    def _load_existing_samples_for_note(self, note: int, temp_dir: str) -> None:
        """Naƒçte existuj√≠c√≠ vzorky pro notu z temp slo≈æky do velocity mapy."""
        pattern = f"m{note:03d}-"
        samples_found = []
        for filename in os.listdir(temp_dir):
            if filename.startswith(pattern) and filename.endswith(".wav"):
                filepath = os.path.join(temp_dir, filename)
                # Extrahujeme velocity z n√°zvu souboru (pokud je tam)
                velocity_match = re.search(r"-v(\d+)\.wav$", filename)
                if velocity_match:
                    target_velocity = int(velocity_match.group(1))
                    samples_found.append((target_velocity, filepath))
        # Seskup√≠me podle velocity do rozsah≈Ø
        if samples_found:
            samples_found.sort(key=lambda x: x[0])
            # Vytvo≈ô√≠me rozsahy na z√°kladƒõ skuteƒçn√Ωch velocity hodnot
            velocity_ranges = self._create_ranges_from_velocities([v for v, _ in samples_found])
            for i, (velocity_range, filepath) in enumerate(zip(velocity_ranges, [f for _, f in samples_found])):
                self.velocity_mapper.add_generated_sample(note, velocity_range, filepath)
            self.logger.debug("Naƒçteno %d existuj√≠c√≠ch vzork≈Ø pro notu %d s rozsahy: %s",
                              len(samples_found), note,
                              [f"{start}-{end}" for start, end in velocity_ranges])

    def _create_ranges_from_velocities(self, velocities: List[int]) -> List[Tuple[int, int]]:
        """Vytvo≈ô√≠ velocity rozsahy z existuj√≠c√≠ch velocity hodnot."""
        if not velocities:
            return []
        if len(velocities) == 1:
            # Jeden vzorek pokryje cel√Ω rozsah
            return [(0, Config.MIDI_VELOCITY_MAX - 1)]
        ranges = []
        sorted_velocities = sorted(velocities)
        for i, velocity in enumerate(sorted_velocities):
            if i == 0:
                # Prvn√≠ rozsah: od 0 do poloviny mezi prvn√≠m a druh√Ωm
                end = (velocity + sorted_velocities[i + 1]) // 2 - 1
                ranges.append((0, end))
            elif i == len(sorted_velocities) - 1:
                # Posledn√≠ rozsah: od poloviny mezi p≈ôedposledn√≠m a posledn√≠m do maxima
                start = (sorted_velocities[i - 1] + velocity) // 2
                ranges.append((start, Config.MIDI_VELOCITY_MAX - 1))
            else:
                # St≈ôedn√≠ rozsahy
                start = (sorted_velocities[i - 1] + velocity) // 2
                end = (velocity + sorted_velocities[i + 1]) // 2 - 1
                ranges.append((start, end))
        return ranges

    def _generate_note_with_multiple_velocities(self, note: int, base_notes: List[int], temp_dir: str) -> None:
        """Vygeneruje notu s r≈Øzn√Ωmi velocity √∫rovnƒõmi interpolovanou z nejbli≈æ≈°√≠ch not."""
        # Najdeme dvƒõ nejbli≈æ≈°√≠ noty pro lep≈°√≠ interpolaci
        lower_note = None
        upper_note = None

        for base_note in base_notes:
            if base_note < note:
                if lower_note is None or base_note > lower_note:
                    lower_note = base_note
            elif base_note > note:
                if upper_note is None or base_note < upper_note:
                    upper_note = base_note
        # Vybereme prim√°rn√≠ a sekund√°rn√≠ zdrojovou notu
        if lower_note is not None and upper_note is not None:
            # M√°me noty z obou stran - vybereme bli≈æ≈°√≠ jako prim√°rn√≠
            if abs(note - lower_note) <= abs(note - upper_note):
                primary_source = lower_note
                secondary_source = upper_note
            else:
                primary_source = upper_note
                secondary_source = lower_note
        elif lower_note is not None:
            primary_source = lower_note
            secondary_source = None
        elif upper_note is not None:
            primary_source = upper_note
            secondary_source = None
        else:
            # Fallback na nejbli≈æ≈°√≠ notu
            primary_source = min(base_notes, key=lambda n: abs(n - note))
            secondary_source = None
        if abs(note - primary_source) > Config.MAX_PITCH_SHIFT:
            self.logger.warning("‚ö†Ô∏è P≈ôeskoƒçena nota %d: p≈ô√≠li≈° velk√Ω rozd√≠l od zdroje %d", note, primary_source)
            return
        self.logger.info("üéØ Generuji notu %d z prim√°rn√≠ho zdroje %d%s",
                         note, primary_source,
                         f" (sekund√°rn√≠: {secondary_source})" if secondary_source else "")
        # Z√≠sk√°me v≈°echny vzorky pro prim√°rn√≠ zdrojovou notu
        primary_samples = self.velocity_mapper.get_samples_for_note(primary_source)
        if not primary_samples:
            self.logger.warning("≈Ω√°dn√© vzorky nalezeny pro prim√°rn√≠ zdrojovou notu %d", primary_source)
            return
        # Generujeme v≈°echny dostupn√© velocity √∫rovnƒõ ze zdrojov√Ωch vzork≈Ø
        generated_samples = []
        num_source_samples = len(primary_samples)

        self.logger.info("üîÑ Generuji %d velocity √∫rovn√≠ z %d zdrojov√Ωch vzork≈Ø pro notu %d",
                         num_source_samples, num_source_samples, note)

        for i, source_sample in enumerate(primary_samples):
            # Vypoƒç√≠t√°me c√≠lovou velocity pro tento vzorek proporcion√°lnƒõ
            velocity_step = Config.MIDI_VELOCITY_MAX / num_source_samples
            target_velocity = int((i + 0.5) * velocity_step)
            target_velocity = min(target_velocity, Config.MIDI_VELOCITY_MAX - 1)

            # Vytvo≈ô√≠me velocity rozsah pro tento vzorek
            if i == 0:
                v_start = 0
            else:
                v_start = int(i * velocity_step)

            if i == num_source_samples - 1:
                v_end = Config.MIDI_VELOCITY_MAX - 1
            else:
                v_end = int((i + 1) * velocity_step) - 1

            velocity_range = (v_start, v_end)
            try:
                generated_path = self._resample_to_note_with_velocity(
                    note, source_sample, primary_source, target_velocity, temp_dir
                )
                if generated_path:
                    generated_samples.append((velocity_range, generated_path))
                    self.logger.info("‚úÖ Vytvo≈ôen: %s (ze zdroje: nota=%d, DbLvl=%d -> velocity=%d)",
                                     os.path.basename(generated_path),
                                     primary_source, source_sample.db_level, target_velocity)
            except Exception as e:
                self.logger.error("‚ö†Ô∏è Chyba p≈ôi generov√°n√≠ noty %d z %d (DbLvl %d): %s",
                                  note, primary_source, source_sample.db_level, e)
        # P≈ôid√°n√≠ vygenerovan√Ωch vzork≈Ø do velocity mapy
        for velocity_range, filepath in generated_samples:
            self.velocity_mapper.add_generated_sample(note, velocity_range, filepath)
        self.logger.info("üéµ Vygenerov√°no %d velocity √∫rovn√≠ pro notu %d", len(generated_samples), note)

    def _resample_to_note_with_velocity(self, target_note: int, source_sample: AudioFile,
                                        source_note: int, target_velocity: int, temp_dir: str) -> Optional[str]:
        """Resampluje zvukov√Ω vzorek na c√≠lovou notu se spr√°vnou velocity."""
        self.logger.debug(
            "Resampling: c√≠lov√° nota=%d, zdrojov√Ω soubor=%s, zdrojov√° nota=%d, DbLvl=%d, c√≠lov√° velocity=%d",
            target_note, source_sample.filename, source_note, source_sample.db_level, target_velocity)
        try:
            # Naƒçten√≠ a zpracov√°n√≠ audia
            y, sr = torchaudio.load(source_sample.filepath)
            y = y.numpy()[0]
            # V√Ωpoƒçet pitch shift ratio
            ratio = 2 ** ((target_note - source_note) / 12.0)
            y_rs = resampy.resample(y, sr, sr / ratio)
            # √öprava amplitudy podle velocity - zachov√°v√°me p≈Øvodn√≠ DbLvl!
            # Nemƒõn√≠me amplitudu podle velocity, proto≈æe DbLvl u≈æ reprezentuje hlasitost
            # Velocity slou≈æ√≠ pouze pro mapov√°n√≠, ne pro zmƒõnu hlasitosti

            # V√Ωpoƒçet spr√°vn√©ho n√°zvu noty pro c√≠lovou MIDI notu
            target_note_name = self._midi_note_to_name(target_note)

            # Vytvo≈ôen√≠ n√°zvu souboru se zachovanou p≈Øvodn√≠ DbLvl
            out_filename = f"m{target_note:03d}-{target_note_name}-DbLvl{source_sample.db_level}-v{target_velocity}.wav"
            out_path = os.path.join(temp_dir, out_filename)
            # Ulo≈æen√≠
            torchaudio.save(out_path, torch.tensor(y_rs).unsqueeze(0), sr)
            self.logger.debug("Pitch shift ratio: %.3f, zachov√°na p≈Øvodn√≠ DbLvl: %d",
                              ratio, source_sample.db_level)
            return out_path
        except Exception as e:
            self.logger.error("Chyba p≈ôi resamplingu noty %d z %s: %s", target_note, source_sample.filepath, e)
            return None

    def _midi_note_to_name(self, midi_note: int) -> str:
        """P≈ôevede MIDI ƒç√≠slo noty na n√°zev ve form√°tu NOTE_OCTAVE (nap≈ô. A_0, Bb_4)."""
        # N√°zvy not v po≈ôad√≠ od C
        note_names = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B']

        # MIDI nota 60 = C4 (st≈ôedn√≠ C)
        # MIDI nota 21 = A0 (nejni≈æ≈°√≠ A na klav√≠ru)

        # V√Ωpoƒçet okt√°vy - MIDI nota 21 (A0) je v okt√°vƒõ 0
        octave = (midi_note - 12) // 12

        # V√Ωpoƒçet pozice noty v r√°mci okt√°vy
        note_index = midi_note % 12
        note_name = note_names[note_index]

        # P≈ôevod # na b pro konzistenci s existuj√≠c√≠m form√°tem
        if '#' in note_name:
            note_name = note_name.replace('#', 'b')

        return f"{note_name}_{octave}"


class DirectoryManager:
    """Spravuje doƒçasn√© slo≈æky a soubory."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.script_dir = os.path.dirname(os.path.abspath(__file__))

    def ensure_temp_dir(self, clean: bool = False) -> str:
        """Vytvo≈ô√≠ doƒçasnou slo≈æku. Pokud clean=True, vyƒçist√≠ ji p≈ôed pou≈æit√≠m."""
        temp_dir = os.path.join(self.script_dir, Config.TEMP_DIR_NAME)
        if clean and os.path.exists(temp_dir):
            self.logger.debug("ƒåi≈°tƒõn√≠ existuj√≠c√≠ doƒçasn√© slo≈æky: %s", temp_dir)
            shutil.rmtree(temp_dir)
        os.makedirs(temp_dir, exist_ok=True)
        self.logger.info("üìÅ Pou≈æ√≠v√°m doƒçasnou slo≈æku: %s", temp_dir)
        return temp_dir


class MidiPlayer:
    """Zpracov√°v√° MIDI vstup a p≈ôehr√°v√° vzorky."""

    def __init__(self, velocity_mapper: VelocityMapper):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.velocity_mapper = velocity_mapper
        self.midi_in = None

    def start_midi_input_loop(self) -> None:
        """Spust√≠ hlavn√≠ smyƒçku pro zpracov√°n√≠ MIDI vstupu."""
        pygame.midi.init()
        pygame.mixer.init()
        try:
            device_id = self._select_midi_device()
            self.midi_in = pygame.midi.Input(device_id)
            self.logger.info("üéº Poslouch√°m MIDI vstup... Ukonƒçete stisknut√≠m Ctrl+C.")
            self._process_midi_events()
        except KeyboardInterrupt:
            self.logger.info("üõë Ukonƒçeno u≈æivatelem.")
        finally:
            self._cleanup()

    def _select_midi_device(self) -> int:
        """Zobraz√≠ dostupn√° MIDI za≈ô√≠zen√≠ a nech√° u≈æivatele vybrat."""
        input_count = pygame.midi.get_count()
        self.logger.info("Dostupn√© MIDI vstupy:")
        for i in range(input_count):
            interf, name, input_dev, _, _ = pygame.midi.get_device_info(i)
            if input_dev:
                self.logger.info("%d: %s", i, name.decode())
        try:
            device_id = int(input("Vyberte MIDI vstup podle ƒç√≠sla (nebo stisknƒõte Enter pro prvn√≠ za≈ô√≠zen√≠): ") or 0)
            self.logger.info("Vybr√°n MIDI vstup: %d", device_id)
            return device_id
        except ValueError:
            self.logger.info("V√Ωchoz√≠ MIDI vstup: 0")
            return 0

    def _process_midi_events(self) -> None:
        """Zpracov√°v√° MIDI ud√°losti v nekoneƒçn√© smyƒçce."""
        while True:
            if self.midi_in.poll():
                events = self.midi_in.read(10)
                for event in events:
                    data, _ = event
                    self._handle_midi_event(data)

    def _handle_midi_event(self, data: List[int]) -> None:
        """Zpracuje jednotlivou MIDI ud√°lost."""
        # Note On
        if data[0] & 0xF0 == 0x90 and data[2] > 0:
            note = data[1]
            velocity = data[2]
            sample = self.velocity_mapper.get_sample_for_velocity(note, velocity)
            if sample:
                pygame.mixer.Sound(sample).play()
                self.logger.info("‚ñ∂Ô∏è P≈ôehr√°v√°m: nota %d, velocity %d -> %s",
                                 note, velocity, os.path.basename(sample))
            else:
                self.logger.warning("‚ö†Ô∏è Vzorek nenalezen: nota %d, velocity %d", note, velocity)
        # Note Off
        elif data[0] & 0xF0 == 0x80 or (data[0] & 0xF0 == 0x90 and data[2] == 0):
            note = data[1]
            self.logger.info("‚èπÔ∏è Zastavuji: nota %d", note)

    def _cleanup(self) -> None:
        """Vyƒçist√≠ MIDI a mixer resources."""
        if self.midi_in:
            self.midi_in.close()
        pygame.midi.quit()
        pygame.mixer.quit()
        self.logger.debug("MIDI a mixer ukonƒçeny.")


class MidiSampler:
    """Hlavn√≠ t≈ô√≠da aplikace, kter√° koordinuje v≈°echny komponenty."""

    def __init__(self, input_dir: str, debug: bool = False, clean_temp: bool = False):
        self.setup_logging(debug)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.input_dir = input_dir
        self.clean_temp = clean_temp
        # Inicializace komponent
        self.directory_manager = DirectoryManager()
        self.velocity_mapper = VelocityMapper()
        self.sample_generator = SampleGenerator(self.velocity_mapper)
        self.midi_player = MidiPlayer(self.velocity_mapper)

    def setup_logging(self, debug_mode: bool) -> None:
        """Nastaven√≠ logov√°n√≠ s volitelnou √∫rovn√≠ podrobnosti."""
        logging.basicConfig(
            level=logging.DEBUG if debug_mode else logging.INFO,
            format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
            handlers=[logging.StreamHandler()]
        )
        if debug_mode:
            logging.getLogger().debug("Logov√°n√≠ nastaveno v debug re≈æimu.")

    def run(self) -> None:
        """Spust√≠ celou aplikaci."""
        self.logger.info("üöÄ Spou≈°t√≠m MIDI Sampler v%s...", Config.VERSION_HASH)
        # 1. Vytvo≈ôen√≠ velocity mapy z p≈Øvodn√≠ch vzork≈Ø
        self.velocity_mapper.build_velocity_map(self.input_dir)
        # 2. P≈ô√≠prava doƒçasn√© slo≈æky
        temp_dir = self.directory_manager.ensure_temp_dir(clean=self.clean_temp)
        # 3. Generov√°n√≠ chybƒõj√≠c√≠ch vzork≈Ø (s cachov√°n√≠m)
        self.sample_generator.generate_missing_notes(temp_dir)
        # 4. Spu≈°tƒõn√≠ MIDI p≈ôehr√°v√°n√≠
        self.midi_player.start_midi_input_loop()


def parse_args():
    """Parsuje argumenty p≈ô√≠kazov√© ≈ô√°dky."""
    parser = argparse.ArgumentParser(
        description=f"MIDI Sampler v{Config.VERSION_HASH} - N√°stroj pro mapov√°n√≠ vzork≈Ø na MIDI velocity a generov√°n√≠ chybƒõj√≠c√≠ch not.")
    parser.add_argument('--input-dir', required=True,
                        help='Slo≈æka se vzorky pojmenovan√Ωmi jako mNNN-NOTA-DbLvlX.wav')
    parser.add_argument('--debug', action='store_true',
                        help='Zapne podrobn√© logov√°n√≠')
    parser.add_argument('--clean-temp', action='store_true',
                        help='Vyƒçist√≠ doƒçasnou slo≈æku p≈ôed spu≈°tƒõn√≠m (znovu vygeneruje v≈°echny vzorky)')
    parser.add_argument('--version', action='store_true',
                        help='Zobraz√≠ verzi a ukonƒç√≠ program')
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    if args.version:
        print(f"MIDI Sampler Version: {Config.VERSION_HASH}")
        exit(0)
    sampler = MidiSampler(
        input_dir=args.input_dir,
        debug=args.debug,
        clean_temp=args.clean_temp
    )
    sampler.run()
